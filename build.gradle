plugins {
    id 'org.asciidoctor.convert' version '1.5.3'
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'java'
    id "net.ltgt.errorprone" version "0.8"
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id 'jacoco'
    id 'com.adarshr.test-logger' version '2.0.0'
}

group = 'proj.kedabra'
version = '0.0.16-SNAPSHOT'
sourceCompatibility = '13'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    jcenter {
        url "http://oss.jfrog.org/artifactory/oss-snapshot-local/"
    }
}

ext {
    set('snippetsDir', file('build/generated-snippets'))
}

def springFoxVersion = '3.0.0-SNAPSHOT'

dependencies {

    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'

    // Swagger
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: "${springFoxVersion}"
    implementation group: 'io.springfox', name: 'springfox-swagger-common', version: "${springFoxVersion}"
    implementation("io.springfox:springfox-swagger2:$springFoxVersion") {
        exclude module: 'swagger-annotations'
        exclude module: 'swagger-models'
    }
    implementation("io.swagger:swagger-annotations:1.5.21")
    implementation("io.swagger:swagger-models:1.5.21")
    implementation group:'io.springfox', name:'springfox-spring-webmvc', version: "${springFoxVersion}"

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // MapStruct
    compileOnly 'org.mapstruct:mapstruct-jdk8:1.3.0.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.0.Final'
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final"
    errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")

    //JWT library for json web tokens
    implementation 'io.jsonwebtoken:jjwt-api:0.10.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.10.5',
            'io.jsonwebtoken:jjwt-jackson:0.10.5'

    //Sentry
    implementation 'io.sentry:sentry-logback:1.7.27'

    // Database
    runtimeOnly 'com.h2database:h2'
    implementation 'org.postgresql:postgresql'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    implementation group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.4.4'


    // Tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.2.4'
    testCompile("org.junit.jupiter:junit-jupiter-params:5.4.2")
    errorprone("com.google.errorprone:error_prone_core:2.3.3")
}

tasks.withType(JavaCompile).configureEach {
    options.errorprone.disableWarningsInGeneratedCode = true
}

//`gradlew test` runs just tests without integration
//`gradlew integrationTest` runs only integrated

testlogger {
    theme 'mocha'
    showExceptions true
    showStackTraces true
    showFullStackTraces false
    showCauses false
    slowThreshold 2000
    showSummary true
    showSimpleNames false
    showPassed true
    showSkipped true
    showFailed true
    showStandardStreams false
    showPassedStandardStreams false
    showSkippedStandardStreams false
    showFailedStandardStreams true
}


test {
    useJUnitPlatform {} //specifies JUnit5
    finalizedBy jacocoTestReport // report is always generated after tests run
}

task unitTest(type: Test) {
    useJUnitPlatform {
        excludeTags 'integration'
    }
}

task integrationTest(type: Test) {

    useJUnitPlatform {
        includeTags 'integration'
    }
}

jacocoTestReport {

    // The JaCoCo plugin adds a JacocoTaskExtension extension to all tasks of type Test.
    // Use task state to include or not task execution data
    // https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/TaskState.html
    // This declaration will be used as a closure, notice there no wrapping parenthesis
    executionData tasks.withType(Test).findAll { it.state.executed }

    reports {
        xml.enabled true
        html.enabled false
    }
    dependsOn test // tests are required to run before generating the report
}

compileJava {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.unmappedTargetPolicy=IGNORE',
            '-Amapstruct.defaultComponentModel=spring'
    ]
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}
